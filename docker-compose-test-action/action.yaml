name: docker-compose-test
description: Testing with docker-compose
inputs:
  compose_file:
    description: "absolute file path to compose file"
    required: true
  
  test_service_name:
    description: "The name of the test service to attach to"
    required: true
  
  additional_compose_files:
    description: "absolute file paths to additional compose files"
    required: false

runs:
  using: "composite"
  steps:
    - name: Docker compose test
      shell: bash
      run: |
        additional_compose_command=""
        delimiter=" "
        declare -a array=(${{ inputs.additional_compose_files}})
        for element in "${array[@]}"; do additional_compose_command="$additional_compose_command -f "$element; done

        docker-compose -f ${{ inputs.compose_file }} $additional_compose_command run --rm ${{ inputs.test_service_name }}

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: "./test-results/xunit/*.xml"

    - name: Publish coverage results
      uses: irongut/CodeCoverageSummary@v1.2.0
      with:
        filename: ./test-results/coverage-reports/*.xml
        badge: true
        fail_below_min: false
